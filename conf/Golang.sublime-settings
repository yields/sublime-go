{
  // Bin is the binary to use for Go.
  //
  // It is useful in cases where you want to work with
  // a different version of go.
  "bin": "go",

  // Root is the path to Go's bins.
  //
  // Typically Go's root is in your $PATH and if you're launching
  // ST from the CLI it will pick up your $PATH and go(1) will be
  // available for the plugin automatically.
  //
  // If you're launching ST in some other way, it might not pick
  // up your login's shell $PATH and so go(1) will not be available.
  //
  // Example: "/usr/local/go/bin"
  "root": null,

  // Vet specific configuration.
  //
  // Allows you to configure vet command line arguments.
  "vet": {
    // If true, vet will run on post save.
    //
    // When you disable post save run, you'll have to run
    // it manaully via the command pallette, or add a keybinding.
    "run_on_post_save": true,

    // The analyzers to run.
    //
    // If empty, all default analyzers are used.
    //
    // To see a list of registered analyzers run:
    //
    //     $ go tool vet help
    //
    // You can also disable specific analyzers, for example:
    // ["composites=false"], disables composite analysis but
    // allows all other analyzers.
  	"analyzers": []
  },

  // Staticcheck(1) specific configuration.
  //
  // You have to have staticcheck(1) installed:
  //
  //   $ go get honnef.co/go/tools/...
  //
  // Note that `staticcheck` addon is still in development
  // remove all checks if it is causing problems.
  "staticcheck": {
    // An array of check codes to run on post-save.
    //
    // When the array is empty, no static checks are run at all.
    // You can see the full list of available checks at:
    //
    // https://staticcheck.io/docs/checks
    //
    // Some handy checks to enable:
    //
    //   - U1000   Unused code.
    //   - SA1029  Inappropriate key in call to context.WithValue
    //
    "checks": []
  }
}
